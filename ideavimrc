let mapleader=" "
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'machakann/vim-highlightedyank' 
Plug 'preservim/nerdtree'

set ideajoin                      " Smart joining of lines
set idearefactormode=keep
set ideastatusicon=gray

set number                        " Show current line number.
set relativenumber                " Show relative numbers.
set showcmd                       " Display incomplete commands.
set showmode                      " Display the mode you're in.
set ignorecase                    " Case-insensitive searching.
set smartcase                     " But case-sensitive if expression contains a capital letter.
set incsearch                     " Highlight matches as you type.
set scrolloff=3                   " Show 3 lines of context around the cursor.
set novisualbell                  " No beeping.
set notimeout
set timeoutlen=1000

map <leader>b <Action>(RebuildSolutionAction)<CR>
nmap <leader>w <Action>(SaveAll)
nmap <leader>t <Action>(RiderUnitTestRunSolutionAction)
nmap <leader><leader>t <Action>(RiderUnitTestQuickListPopupAction)
nmap <leader>f :action RerunFailedTests<CR>
nmap <leader><leader>r <Action>(ChooseRunConfiguration)
nmap <leader>s <Action>(Stop)
nmap <c-z> :action ToggleDistractionFreeMode<CR>
nmap <leader>te :action ActivateTerminalToolWindow<CR>
nmap <leader>re :action Refactorings.QuickListPopupAction<CR>
vmap <leader>re :action Refactorings.QuickListPopupAction<CR>
nmap <leader>ca :action ShowIntentionActions<CR>
" nnoremap <leader>gd :action GotToDeclaration<CR>
nmap <leader>gr :action FindUsages<CR>
nmap <leader>bp :action ToggleLineBreakpoint<CR>
nmap <c-b> :action RecentFiles<CR>

sethandler <c-j> a:vim
sethandler <c-k> a:vim

nmap <c-h> <c-w>h
nmap <c-l> <c-w>l
nmap <c-j> <c-w>j
nmap <c-k> <c-w>k

nmap <leader><leader>e :NERDTree<CR>
nmap <leader>ec :NERDTreeClose<CR>

nmap <c-p> <Action>(GotoFile)
" Move visual blocks up and down
vmap J :m '>+1<CR>gv=gv
vmap K :m '<-2<CR>gv=gv

set clipboard+=unnamed
set clipboard+=ideaput

nmap ]q :cnext<CR>
nmap [q :cprev<CR>
nmap ]Q :clast<CR>
nmap [Q :cfirst<CR>

:nohls
